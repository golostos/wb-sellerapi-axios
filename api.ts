/* tslint:disable */
/* eslint-disable */
/**
 * API продавца
 * # Общее описание Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/) Описание в оригинальном swagger-формате swagger OpenAPI-файл swagger.yaml Для ручной проверки API вы можете использовать: Под ОС Windows - [PostMan](https://www.postman.com/) Под ОС Linux - [curl](https://curl.se/) ## Поддержка Техническая поддержка осуществляется через диалоги в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). ## Авторизация Авторизация осуществляется по токенам API, которые владелец личного кабинета (главный пользователь) самостоятельно генерирует в разделе [Профиль --> Настройки --> Доступ к API](https://seller.wildberries.ru/supplier-settings/access-to-api). Существует три типа токенов: Стандартный. Используется для работы с методами из разделов: Цены, Промокоды и скидки, Контент, Marketplace, Рекомендации, Отзывы, Вопросы. Статистика. Используется для работы с методами из раздела Статистика. Реклама. Используется для работы с методами из раздела Реклама. Обратите внимание, что токен отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. Созданный токен следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339). В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд. Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). Примеры: `2019-06-20` `2019-06-20T00:00:00Z` `2019-06-20T23:59:59` `2019-06-20T00:00:00.12345Z` `2019-06-20T00:00:00.12345` `2017-03-25T00:00:00` ## Release Notes Для просмотра обновлений перейдите по ссылке.
 *
 * The version of the OpenAPI document: 2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AllCpmByType200ResponseInner
 */
export interface AllCpmByType200ResponseInner {
    /**
     * Значение параметра (param) запроса
     * @type {number}
     * @memberof AllCpmByType200ResponseInner
     */
    'param': number;
    /**
     * Информация о ставке(-ах)
     * @type {Array<AllCpmByType200ResponseInnerCpmInner>}
     * @memberof AllCpmByType200ResponseInner
     */
    'cpm': Array<AllCpmByType200ResponseInnerCpmInner>;
}
/**
 * 
 * @export
 * @interface AllCpmByType200ResponseInnerCpmInner
 */
export interface AllCpmByType200ResponseInnerCpmInner {
    /**
     * Размер ставки
     * @type {number}
     * @memberof AllCpmByType200ResponseInnerCpmInner
     */
    'Cpm': number;
    /**
     * Количество ставок
     * @type {number}
     * @memberof AllCpmByType200ResponseInnerCpmInner
     */
    'Count': number;
}
/**
 * @type AllCpmByType400Response
 * @export
 */
export type AllCpmByType400Response = string;

/**
 * 
 * @export
 * @interface AllCpmByTypeRequest
 */
export interface AllCpmByTypeRequest {
    /**
     * Массив параметров запроса, по которым будет получен список ставок активных РК: должен быть значением `menuId` (для РК в каталоге), `subjectId` (для РК в поиске и рекомендациях) или `setId` (для РК в карточке товара).
     * @type {Array<number>}
     * @memberof AllCpmByTypeRequest
     */
    'param'?: Array<number>;
}
/**
 * @type ChangeActiveSubjectIdRk400Response
 * @export
 */
export type ChangeActiveSubjectIdRk400Response = string;

/**
 * 
 * @export
 * @interface GetAllCpm200ResponseInner
 */
export interface GetAllCpm200ResponseInner {
    /**
     * Количество ставок
     * @type {number}
     * @memberof GetAllCpm200ResponseInner
     */
    'Count': number;
    /**
     * Размер ставки
     * @type {number}
     * @memberof GetAllCpm200ResponseInner
     */
    'Cpm': number;
}
/**
 * @type GetAllCpm400Response
 * @export
 */
export type GetAllCpm400Response = string;

/**
 * @type GetAllCpm422Response
 * @export
 */
export type GetAllCpm422Response = string;

/**
 * 
 * @export
 * @interface GetMenuIdDict200ResponseInner
 */
export interface GetMenuIdDict200ResponseInner {
    /**
     * Значение для параметра `menuId`
     * @type {number}
     * @memberof GetMenuIdDict200ResponseInner
     */
    'id': number;
    /**
     * Название меню, где размещается РК
     * @type {string}
     * @memberof GetMenuIdDict200ResponseInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GetRk200Response
 */
export interface GetRk200Response {
    /**
     * Идентификатор РК
     * @type {number}
     * @memberof GetRk200Response
     */
    'advertId': number;
    /**
     * Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
     * @type {number}
     * @memberof GetRk200Response
     */
    'type': number;
    /**
     * Статус РК: 7 - РК завершена 9 - идут показы 11 - РК на паузе
     * @type {number}
     * @memberof GetRk200Response
     */
    'status': number;
    /**
     * Дневной бюджет, если не установлен, то 0
     * @type {number}
     * @memberof GetRk200Response
     */
    'dailyBudget': number;
    /**
     * Время создания РК
     * @type {string}
     * @memberof GetRk200Response
     */
    'createTime': string;
    /**
     * Время последнего изменения РК
     * @type {string}
     * @memberof GetRk200Response
     */
    'changeTime': string;
    /**
     * Дата запуска РК
     * @type {string}
     * @memberof GetRk200Response
     */
    'startTime': string;
    /**
     * Дата завершения РК
     * @type {string}
     * @memberof GetRk200Response
     */
    'endTime': string;
    /**
     * Название РК
     * @type {string}
     * @memberof GetRk200Response
     */
    'name': string;
    /**
     * Параметры РК
     * @type {Array<GetRk200ResponseParamsInner>}
     * @memberof GetRk200Response
     */
    'params': Array<GetRk200ResponseParamsInner>;
}
/**
 * 
 * @export
 * @interface GetRk200ResponseParamsInner
 */
export interface GetRk200ResponseParamsInner {
    /**
     * Название предметной группы (для РК в поиске и рекомендациях)
     * @type {string}
     * @memberof GetRk200ResponseParamsInner
     */
    'subjectName'?: string;
    /**
     * Флаг активности РК, true - активна, false - неактивна new
     * @type {boolean}
     * @memberof GetRk200ResponseParamsInner
     */
    'active'?: boolean;
    /**
     * Интервалы часов показа РК
     * @type {Array<GetRk200ResponseParamsInnerIntervalsInner>}
     * @memberof GetRk200ResponseParamsInner
     */
    'intervals': Array<GetRk200ResponseParamsInnerIntervalsInner>;
    /**
     * Текущая ставка
     * @type {number}
     * @memberof GetRk200ResponseParamsInner
     */
    'price': number;
    /**
     * Идентификатор меню, где размещается РК (для РК в каталоге)
     * @type {number}
     * @memberof GetRk200ResponseParamsInner
     */
    'menuId'?: number;
    /**
     * Идентификатор предметной группы, для которой создана РК (для РК в поиске и рекомендациях)
     * @type {number}
     * @memberof GetRk200ResponseParamsInner
     */
    'subjectId'?: number;
    /**
     * Идентификатор сочетания предмета и пола (для РК в карточке товара)
     * @type {number}
     * @memberof GetRk200ResponseParamsInner
     */
    'setId'?: number;
    /**
     * Сочетание предмета и пола (для РК в карточке товара)
     * @type {string}
     * @memberof GetRk200ResponseParamsInner
     */
    'setName'?: string;
    /**
     * Название меню, где размещается РК (для РК в каталоге)
     * @type {any}
     * @memberof GetRk200ResponseParamsInner
     */
    'menuName'?: any;
    /**
     * Массив номенклатур РК
     * @type {Array<GetRk200ResponseParamsInnerNmsInner>}
     * @memberof GetRk200ResponseParamsInner
     */
    'nms'?: Array<GetRk200ResponseParamsInnerNmsInner>;
}
/**
 * 
 * @export
 * @interface GetRk200ResponseParamsInnerIntervalsInner
 */
export interface GetRk200ResponseParamsInnerIntervalsInner {
    /**
     * Время начала показов
     * @type {number}
     * @memberof GetRk200ResponseParamsInnerIntervalsInner
     */
    'begin': number;
    /**
     * Время окончания показов
     * @type {number}
     * @memberof GetRk200ResponseParamsInnerIntervalsInner
     */
    'end': number;
}
/**
 * 
 * @export
 * @interface GetRk200ResponseParamsInnerNmsInner
 */
export interface GetRk200ResponseParamsInnerNmsInner {
    /**
     * Числовой идентификатор номенклатуры Wildberries (nmId)
     * @type {number}
     * @memberof GetRk200ResponseParamsInnerNmsInner
     */
    'nm': number;
    /**
     * Состояние номенклатуры (true - активна или false - неактивна)
     * @type {boolean}
     * @memberof GetRk200ResponseParamsInnerNmsInner
     */
    'active': boolean;
}
/**
 * @type GetRk400Response
 * @export
 */
export type GetRk400Response = string;

/**
 * 
 * @export
 * @interface GetRkCount200Response
 */
export interface GetRkCount200Response {
    /**
     * Общее количество РК всех статусов и типов
     * @type {number}
     * @memberof GetRkCount200Response
     */
    'all': number;
    /**
     * Массив РК
     * @type {Array<GetRkCount200ResponseAdvertsInner>}
     * @memberof GetRkCount200Response
     */
    'adverts': Array<GetRkCount200ResponseAdvertsInner>;
}
/**
 * 
 * @export
 * @interface GetRkCount200ResponseAdvertsInner
 */
export interface GetRkCount200ResponseAdvertsInner {
    /**
     * Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
     * @type {number}
     * @memberof GetRkCount200ResponseAdvertsInner
     */
    'type': number;
    /**
     * Статус РК: 7 - РК завершена 9 - идут показы 11 - РК на паузе
     * @type {number}
     * @memberof GetRkCount200ResponseAdvertsInner
     */
    'status': number;
    /**
     * Количество РК
     * @type {number}
     * @memberof GetRkCount200ResponseAdvertsInner
     */
    'count': number;
}
/**
 * @type GetRkCount401Response
 * @export
 */
export type GetRkCount401Response = string;

/**
 * 
 * @export
 * @interface GetRks200ResponseInner
 */
export interface GetRks200ResponseInner {
    /**
     * Идентификатор РК
     * @type {number}
     * @memberof GetRks200ResponseInner
     */
    'advertId': number;
    /**
     * Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
     * @type {number}
     * @memberof GetRks200ResponseInner
     */
    'type': number;
    /**
     * Статус РК: 7 - РК завершена 9 - идут показы 11 - РК на паузе
     * @type {number}
     * @memberof GetRks200ResponseInner
     */
    'status': number;
    /**
     * Сумма дневного бюджета new
     * @type {number}
     * @memberof GetRks200ResponseInner
     */
    'dailyBudget': number;
    /**
     * Время создания РК
     * @type {string}
     * @memberof GetRks200ResponseInner
     */
    'createTime': string;
    /**
     * Время последнего изменения РК
     * @type {string}
     * @memberof GetRks200ResponseInner
     */
    'changeTime': string;
    /**
     * Время последнего запуска РК new
     * @type {string}
     * @memberof GetRks200ResponseInner
     */
    'startTime': string;
    /**
     * Время завершения РК (state 7) new
     * @type {string}
     * @memberof GetRks200ResponseInner
     */
    'endTime': string;
}
/**
 * @type GetRks400Response
 * @export
 */
export type GetRks400Response = string;

/**
 * 
 * @export
 * @interface GetSetIdDict200ResponseInner
 */
export interface GetSetIdDict200ResponseInner {
    /**
     * Значение для параметра `setId`
     * @type {number}
     * @memberof GetSetIdDict200ResponseInner
     */
    'id': number;
    /**
     * Сочетание предмета и пола
     * @type {string}
     * @memberof GetSetIdDict200ResponseInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GetSubjectIdDict200ResponseInner
 */
export interface GetSubjectIdDict200ResponseInner {
    /**
     * Значение для параметра `subjectId`
     * @type {number}
     * @memberof GetSubjectIdDict200ResponseInner
     */
    'id': number;
    /**
     * Название предметной группы, для которой создана РК
     * @type {string}
     * @memberof GetSubjectIdDict200ResponseInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Код ошибки
     * @type {string}
     * @memberof ModelError
     */
    'code'?: string;
    /**
     * Описание ошибки
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
    /**
     * Дополнительные данные, обогащающие ошибку
     * @type {object}
     * @memberof ModelError
     */
    'data'?: object | null;
}
/**
 * @type RenameRk400Response
 * @export
 */
export type RenameRk400Response = string;

/**
 * @type RenameRk422Response
 * @export
 */
export type RenameRk422Response = string;

/**
 * 
 * @export
 * @interface RenameRkRequest
 */
export interface RenameRkRequest {
    /**
     * Идентификатор РК, у которой меняется название
     * @type {number}
     * @memberof RenameRkRequest
     */
    'advertId': number;
    /**
     * Новое название (максимум 100 символов)
     * @type {string}
     * @memberof RenameRkRequest
     */
    'name': string;
}
/**
 * @type SetCpm400Response
 * @export
 */
export type SetCpm400Response = string;

/**
 * @type SetCpm422Response
 * @export
 */
export type SetCpm422Response = string;

/**
 * 
 * @export
 * @interface SetCpmRequest
 */
export interface SetCpmRequest {
    /**
     * Идентификатор РК, где меняется ставка
     * @type {number}
     * @memberof SetCpmRequest
     */
    'advertId': number;
    /**
     * Тип РК, где меняется ставка: 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
     * @type {number}
     * @memberof SetCpmRequest
     */
    'type': SetCpmRequestTypeEnum;
    /**
     * Новое значение ставки
     * @type {number}
     * @memberof SetCpmRequest
     */
    'cpm': number;
    /**
     * Параметр, для которого будет внесено изменение (является значением `subjectId` или `setId` в зависимости от типа РК)
     * @type {number}
     * @memberof SetCpmRequest
     */
    'param': number;
}

export const SetCpmRequestTypeEnum = {
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type SetCpmRequestTypeEnum = typeof SetCpmRequestTypeEnum[keyof typeof SetCpmRequestTypeEnum];

/**
 * @type SetIntervalsRk400Response
 * @export
 */
export type SetIntervalsRk400Response = string;

/**
 * @type SetIntervalsRk422Response
 * @export
 */
export type SetIntervalsRk422Response = string;

/**
 * 
 * @export
 * @interface SetIntervalsRkRequest
 */
export interface SetIntervalsRkRequest {
    /**
     * Идентификатор РК, у которой меняется бюджет
     * @type {number}
     * @memberof SetIntervalsRkRequest
     */
    'advertId': number;
    /**
     * Массив новых значений для интервалов. Максимальное количество интервалов `24`.
     * @type {Array<SetIntervalsRkRequestIntervalsInner>}
     * @memberof SetIntervalsRkRequest
     */
    'intervals': Array<SetIntervalsRkRequestIntervalsInner>;
    /**
     * Параметр, для которого будет внесено изменение, должен быть значением `menuId` (для РК в каталоге), `subjectId` (для РК в поиске и рекомендациях) или `setId` (для РК в карточке товара)
     * @type {number}
     * @memberof SetIntervalsRkRequest
     */
    'param': number;
}
/**
 * 
 * @export
 * @interface SetIntervalsRkRequestIntervalsInner
 */
export interface SetIntervalsRkRequestIntervalsInner {
    /**
     * Время начала показов, по 24 часовой схеме (\"begin\": 15)
     * @type {number}
     * @memberof SetIntervalsRkRequestIntervalsInner
     */
    'begin'?: number;
    /**
     * Время окончания показов, по 24 часовой схеме (\"end\": 21)
     * @type {number}
     * @memberof SetIntervalsRkRequestIntervalsInner
     */
    'end'?: number;
}
/**
 * @type SetNmActiveRk400Response
 * @export
 */
export type SetNmActiveRk400Response = string;

/**
 * @type SetNmActiveRk422Response
 * @export
 */
export type SetNmActiveRk422Response = string;

/**
 * 
 * @export
 * @interface SetNmActiveRkRequest
 */
export interface SetNmActiveRkRequest {
    /**
     * Идентификатор РК
     * @type {number}
     * @memberof SetNmActiveRkRequest
     */
    'advertId': number;
    /**
     * Массив значений активности для номенклатур. Максимальноe количество номенклатур в запросе `50`.
     * @type {Array<SetNmActiveRkRequestActiveInner>}
     * @memberof SetNmActiveRkRequest
     */
    'active': Array<SetNmActiveRkRequestActiveInner>;
    /**
     * Параметр, для которого будет внесено изменение, должен быть значением `menuId` (для РК в каталоге), `subjectId` (для РК в поиске и рекомендациях) или `setId` (для РК в карточке товара).
     * @type {number}
     * @memberof SetNmActiveRkRequest
     */
    'param': number;
}
/**
 * 
 * @export
 * @interface SetNmActiveRkRequestActiveInner
 */
export interface SetNmActiveRkRequestActiveInner {
    /**
     * Артикул WB (`nmId`)
     * @type {number}
     * @memberof SetNmActiveRkRequestActiveInner
     */
    'nm': number;
    /**
     * Новое состояние (`true` - сделать номенклатуру активной или `false` - сделать номенклатуру неактивной)
     * @type {boolean}
     * @memberof SetNmActiveRkRequestActiveInner
     */
    'active': boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Метод позволяет получить список ставок по типу размещения РК. С помощью этого метода изменить ставку невозможно.
         * @summary Список ставок по типу размещения РК
         * @param {4 | 5 | 6 | 7} type Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {AllCpmByTypeRequest} allCpmByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allCpmByType: async (type: 4 | 5 | 6 | 7, allCpmByTypeRequest: AllCpmByTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('allCpmByType', 'type', type)
            // verify required parameter 'allCpmByTypeRequest' is not null or undefined
            assertParamExists('allCpmByType', 'allCpmByTypeRequest', allCpmByTypeRequest)
            const localVarPath = `/adv/v0/allcpm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(allCpmByTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет изменить активность предметной группы для рекламы в поиске. Изменение активности доступно только для РК в статусе 9 или 11.
         * @summary Изменение активности предметной группы для РК в поиске
         * @param {number} id Идентификатор РК
         * @param {number} subjectId Идентификатор предметной группы, для которой меняется активность
         * @param {boolean} status Новое состояние (&#x60;true&#x60; - сделать группу активной или &#x60;false&#x60; - сделать группу неактивной)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeActiveSubjectIdRk: async (id: number, subjectId: number, status: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('changeActiveSubjectIdRk', 'id', id)
            // verify required parameter 'subjectId' is not null or undefined
            assertParamExists('changeActiveSubjectIdRk', 'subjectId', subjectId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('changeActiveSubjectIdRk', 'status', status)
            const localVarPath = `/adv/v0/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subjectId'] = subjectId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получение списка ставок для типа размещения. Данные в ответе отсортированы по величине ставки от большей к меньшей.
         * @summary Список ставок
         * @param {4 | 5 | 6 | 7} type Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {number} param Параметр запроса, по которому будет получен список ставок активных РК. Должен быть значением &#x60;menuId&#x60;, &#x60;subjectId&#x60; или &#x60;setId&#x60; в зависимости от типа РК.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCpm: async (type: 4 | 5 | 6 | 7, param: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getAllCpm', 'type', type)
            // verify required parameter 'param' is not null or undefined
            assertParamExists('getAllCpm', 'param', param)
            const localVarPath = `/adv/v0/cpm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (param !== undefined) {
                localVarQueryParameter['param'] = param;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет получить список значений параметра menuId.
         * @summary Словарь значений параметра menuId
         * @param {number} [id] Идентификатор меню, где размещается РК (для РК в каталоге). Принимает значение параметра &#x60;menuId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuIdDict: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adv/v0/params/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получение информации об одной РК
         * @summary Информация о РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRk: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRk', 'id', id)
            const localVarPath = `/adv/v0/advert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получение количества рекламных кампаний (РК) поставщика
         * @summary Получение РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRkCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adv/v0/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет получить список РК продавца.
         * @summary Список РК
         * @param {7 | 9 | 11} [status] Статус РК: 7 - РК завершена 9 - идут показы 11 - РК на паузе
         * @param {4 | 5 | 6 | 7} [type] Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {number} [limit] Количество кампаний в ответе
         * @param {number} [offset] Смещение относительно первой РК
         * @param {'create' | 'change' | 'id'} [order] Порядок: create (по времени создания РК) change (по времени последнего изменения РК) id (по идентификатору РК) Например: **_/api/v0/adverts?type&#x3D;6&amp;limit&#x3D;5&amp;offset&#x3D;10&amp;order&#x3D;change&amp;direction&#x3D;asc**
         * @param {'desc' | 'asc'} [direction] Направление: desc (от большего к меньшему) asc (от меньшего к большему) Например: **_/api/v0/adverts?type&#x3D;6&amp;limit&#x3D;5&amp;offset&#x3D;10&amp;order&#x3D;change&amp;direction&#x3D;asc**
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRks: async (status?: 7 | 9 | 11, type?: 4 | 5 | 6 | 7, limit?: number, offset?: number, order?: 'create' | 'change' | 'id', direction?: 'desc' | 'asc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adv/v0/adverts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет получить список значений параметра setId.
         * @summary Словарь значений параметра setId
         * @param {number} [id] Идентификатор сочетания предмета и пола (для РК в карточке товара). Принимает значение параметра &#x60;setId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetIdDict: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adv/v0/params/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет получить список значений параметра subjectId.
         * @summary Словарь значений параметра subjectId
         * @param {number} [id] Идентификатор предметной группы, для которой создана РК (для РК в поиске и рекомендациях). Принимает значение параметра &#x60;subjectId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectIdDict: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adv/v0/params/subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * РК в статусе \"9 - идут показы\" - можно запаузить, сделав GET на `/api/v0/pause?id=***`.
         * @summary Пауза РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseRk: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pauseRk', 'id', id)
            const localVarPath = `/adv/v0/pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет переименовать рекламную кампанию.
         * @summary Переименование РК
         * @param {RenameRkRequest} [renameRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameRk: async (renameRkRequest?: RenameRkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adv/v0/rename`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(renameRkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Изменение ставки у рекламной кампании Доступно для РК в карточке товара, поиске или рекомендациях
         * @summary Изменение ставки у РК
         * @param {SetCpmRequest} setCpmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCpm: async (setCpmRequest: SetCpmRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setCpmRequest' is not null or undefined
            assertParamExists('setCpm', 'setCpmRequest', setCpmRequest)
            const localVarPath = `/adv/v0/cpm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setCpmRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет изменить временной интервал показа рекламной кампании.
         * @summary Изменение интервалов показа РК
         * @param {SetIntervalsRkRequest} [setIntervalsRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIntervalsRk: async (setIntervalsRkRequest?: SetIntervalsRkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adv/v0/intervals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setIntervalsRkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет изменить активность номенклатур в РК.
         * @summary Изменение активности номенклатур РК
         * @param {SetNmActiveRkRequest} [setNmActiveRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNmActiveRk: async (setNmActiveRkRequest?: SetNmActiveRkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adv/v0/nmactive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setNmActiveRkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * РК в статусе \"11 - на паузе\" - можно снова запустить. Для запуска необходимо, чтобы у РК были активные ставки. GET на `/api/v0/start?id=***` - в ответ `200`, если статус изменен, или `400`, если это сделать не удалось.
         * @summary Запуск РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startRk: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('startRk', 'id', id)
            const localVarPath = `/adv/v0/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод позволяет завершить РК, находящиеся в статусе 9 или 11.
         * @summary Завершение РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopRk: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stopRk', 'id', id)
            const localVarPath = `/adv/v0/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HeaderApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Метод позволяет получить список ставок по типу размещения РК. С помощью этого метода изменить ставку невозможно.
         * @summary Список ставок по типу размещения РК
         * @param {4 | 5 | 6 | 7} type Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {AllCpmByTypeRequest} allCpmByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allCpmByType(type: 4 | 5 | 6 | 7, allCpmByTypeRequest: AllCpmByTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AllCpmByType200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allCpmByType(type, allCpmByTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет изменить активность предметной группы для рекламы в поиске. Изменение активности доступно только для РК в статусе 9 или 11.
         * @summary Изменение активности предметной группы для РК в поиске
         * @param {number} id Идентификатор РК
         * @param {number} subjectId Идентификатор предметной группы, для которой меняется активность
         * @param {boolean} status Новое состояние (&#x60;true&#x60; - сделать группу активной или &#x60;false&#x60; - сделать группу неактивной)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeActiveSubjectIdRk(id: number, subjectId: number, status: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeActiveSubjectIdRk(id, subjectId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получение списка ставок для типа размещения. Данные в ответе отсортированы по величине ставки от большей к меньшей.
         * @summary Список ставок
         * @param {4 | 5 | 6 | 7} type Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {number} param Параметр запроса, по которому будет получен список ставок активных РК. Должен быть значением &#x60;menuId&#x60;, &#x60;subjectId&#x60; или &#x60;setId&#x60; в зависимости от типа РК.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCpm(type: 4 | 5 | 6 | 7, param: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAllCpm200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCpm(type, param, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет получить список значений параметра menuId.
         * @summary Словарь значений параметра menuId
         * @param {number} [id] Идентификатор меню, где размещается РК (для РК в каталоге). Принимает значение параметра &#x60;menuId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuIdDict(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMenuIdDict200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuIdDict(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получение информации об одной РК
         * @summary Информация о РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRk(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRk200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRk(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получение количества рекламных кампаний (РК) поставщика
         * @summary Получение РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRkCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRkCount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRkCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет получить список РК продавца.
         * @summary Список РК
         * @param {7 | 9 | 11} [status] Статус РК: 7 - РК завершена 9 - идут показы 11 - РК на паузе
         * @param {4 | 5 | 6 | 7} [type] Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {number} [limit] Количество кампаний в ответе
         * @param {number} [offset] Смещение относительно первой РК
         * @param {'create' | 'change' | 'id'} [order] Порядок: create (по времени создания РК) change (по времени последнего изменения РК) id (по идентификатору РК) Например: **_/api/v0/adverts?type&#x3D;6&amp;limit&#x3D;5&amp;offset&#x3D;10&amp;order&#x3D;change&amp;direction&#x3D;asc**
         * @param {'desc' | 'asc'} [direction] Направление: desc (от большего к меньшему) asc (от меньшего к большему) Например: **_/api/v0/adverts?type&#x3D;6&amp;limit&#x3D;5&amp;offset&#x3D;10&amp;order&#x3D;change&amp;direction&#x3D;asc**
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRks(status?: 7 | 9 | 11, type?: 4 | 5 | 6 | 7, limit?: number, offset?: number, order?: 'create' | 'change' | 'id', direction?: 'desc' | 'asc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRks200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRks(status, type, limit, offset, order, direction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет получить список значений параметра setId.
         * @summary Словарь значений параметра setId
         * @param {number} [id] Идентификатор сочетания предмета и пола (для РК в карточке товара). Принимает значение параметра &#x60;setId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSetIdDict(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSetIdDict200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSetIdDict(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет получить список значений параметра subjectId.
         * @summary Словарь значений параметра subjectId
         * @param {number} [id] Идентификатор предметной группы, для которой создана РК (для РК в поиске и рекомендациях). Принимает значение параметра &#x60;subjectId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectIdDict(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSubjectIdDict200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectIdDict(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * РК в статусе \"9 - идут показы\" - можно запаузить, сделав GET на `/api/v0/pause?id=***`.
         * @summary Пауза РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseRk(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseRk(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет переименовать рекламную кампанию.
         * @summary Переименование РК
         * @param {RenameRkRequest} [renameRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renameRk(renameRkRequest?: RenameRkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.renameRk(renameRkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Изменение ставки у рекламной кампании Доступно для РК в карточке товара, поиске или рекомендациях
         * @summary Изменение ставки у РК
         * @param {SetCpmRequest} setCpmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCpm(setCpmRequest: SetCpmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setCpm(setCpmRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет изменить временной интервал показа рекламной кампании.
         * @summary Изменение интервалов показа РК
         * @param {SetIntervalsRkRequest} [setIntervalsRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setIntervalsRk(setIntervalsRkRequest?: SetIntervalsRkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setIntervalsRk(setIntervalsRkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет изменить активность номенклатур в РК.
         * @summary Изменение активности номенклатур РК
         * @param {SetNmActiveRkRequest} [setNmActiveRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setNmActiveRk(setNmActiveRkRequest?: SetNmActiveRkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setNmActiveRk(setNmActiveRkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * РК в статусе \"11 - на паузе\" - можно снова запустить. Для запуска необходимо, чтобы у РК были активные ставки. GET на `/api/v0/start?id=***` - в ответ `200`, если статус изменен, или `400`, если это сделать не удалось.
         * @summary Запуск РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startRk(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startRk(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод позволяет завершить РК, находящиеся в статусе 9 или 11.
         * @summary Завершение РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopRk(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopRk(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Метод позволяет получить список ставок по типу размещения РК. С помощью этого метода изменить ставку невозможно.
         * @summary Список ставок по типу размещения РК
         * @param {4 | 5 | 6 | 7} type Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {AllCpmByTypeRequest} allCpmByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allCpmByType(type: 4 | 5 | 6 | 7, allCpmByTypeRequest: AllCpmByTypeRequest, options?: any): AxiosPromise<Array<AllCpmByType200ResponseInner>> {
            return localVarFp.allCpmByType(type, allCpmByTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет изменить активность предметной группы для рекламы в поиске. Изменение активности доступно только для РК в статусе 9 или 11.
         * @summary Изменение активности предметной группы для РК в поиске
         * @param {number} id Идентификатор РК
         * @param {number} subjectId Идентификатор предметной группы, для которой меняется активность
         * @param {boolean} status Новое состояние (&#x60;true&#x60; - сделать группу активной или &#x60;false&#x60; - сделать группу неактивной)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeActiveSubjectIdRk(id: number, subjectId: number, status: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.changeActiveSubjectIdRk(id, subjectId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Получение списка ставок для типа размещения. Данные в ответе отсортированы по величине ставки от большей к меньшей.
         * @summary Список ставок
         * @param {4 | 5 | 6 | 7} type Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {number} param Параметр запроса, по которому будет получен список ставок активных РК. Должен быть значением &#x60;menuId&#x60;, &#x60;subjectId&#x60; или &#x60;setId&#x60; в зависимости от типа РК.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCpm(type: 4 | 5 | 6 | 7, param: number, options?: any): AxiosPromise<Array<GetAllCpm200ResponseInner>> {
            return localVarFp.getAllCpm(type, param, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет получить список значений параметра menuId.
         * @summary Словарь значений параметра menuId
         * @param {number} [id] Идентификатор меню, где размещается РК (для РК в каталоге). Принимает значение параметра &#x60;menuId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuIdDict(id?: number, options?: any): AxiosPromise<Array<GetMenuIdDict200ResponseInner>> {
            return localVarFp.getMenuIdDict(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Получение информации об одной РК
         * @summary Информация о РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRk(id: number, options?: any): AxiosPromise<GetRk200Response> {
            return localVarFp.getRk(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Получение количества рекламных кампаний (РК) поставщика
         * @summary Получение РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRkCount(options?: any): AxiosPromise<GetRkCount200Response> {
            return localVarFp.getRkCount(options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет получить список РК продавца.
         * @summary Список РК
         * @param {7 | 9 | 11} [status] Статус РК: 7 - РК завершена 9 - идут показы 11 - РК на паузе
         * @param {4 | 5 | 6 | 7} [type] Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
         * @param {number} [limit] Количество кампаний в ответе
         * @param {number} [offset] Смещение относительно первой РК
         * @param {'create' | 'change' | 'id'} [order] Порядок: create (по времени создания РК) change (по времени последнего изменения РК) id (по идентификатору РК) Например: **_/api/v0/adverts?type&#x3D;6&amp;limit&#x3D;5&amp;offset&#x3D;10&amp;order&#x3D;change&amp;direction&#x3D;asc**
         * @param {'desc' | 'asc'} [direction] Направление: desc (от большего к меньшему) asc (от меньшего к большему) Например: **_/api/v0/adverts?type&#x3D;6&amp;limit&#x3D;5&amp;offset&#x3D;10&amp;order&#x3D;change&amp;direction&#x3D;asc**
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRks(status?: 7 | 9 | 11, type?: 4 | 5 | 6 | 7, limit?: number, offset?: number, order?: 'create' | 'change' | 'id', direction?: 'desc' | 'asc', options?: any): AxiosPromise<Array<GetRks200ResponseInner>> {
            return localVarFp.getRks(status, type, limit, offset, order, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет получить список значений параметра setId.
         * @summary Словарь значений параметра setId
         * @param {number} [id] Идентификатор сочетания предмета и пола (для РК в карточке товара). Принимает значение параметра &#x60;setId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetIdDict(id?: number, options?: any): AxiosPromise<Array<GetSetIdDict200ResponseInner>> {
            return localVarFp.getSetIdDict(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет получить список значений параметра subjectId.
         * @summary Словарь значений параметра subjectId
         * @param {number} [id] Идентификатор предметной группы, для которой создана РК (для РК в поиске и рекомендациях). Принимает значение параметра &#x60;subjectId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectIdDict(id?: number, options?: any): AxiosPromise<Array<GetSubjectIdDict200ResponseInner>> {
            return localVarFp.getSubjectIdDict(id, options).then((request) => request(axios, basePath));
        },
        /**
         * РК в статусе \"9 - идут показы\" - можно запаузить, сделав GET на `/api/v0/pause?id=***`.
         * @summary Пауза РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseRk(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.pauseRk(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет переименовать рекламную кампанию.
         * @summary Переименование РК
         * @param {RenameRkRequest} [renameRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameRk(renameRkRequest?: RenameRkRequest, options?: any): AxiosPromise<void> {
            return localVarFp.renameRk(renameRkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Изменение ставки у рекламной кампании Доступно для РК в карточке товара, поиске или рекомендациях
         * @summary Изменение ставки у РК
         * @param {SetCpmRequest} setCpmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCpm(setCpmRequest: SetCpmRequest, options?: any): AxiosPromise<void> {
            return localVarFp.setCpm(setCpmRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет изменить временной интервал показа рекламной кампании.
         * @summary Изменение интервалов показа РК
         * @param {SetIntervalsRkRequest} [setIntervalsRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIntervalsRk(setIntervalsRkRequest?: SetIntervalsRkRequest, options?: any): AxiosPromise<void> {
            return localVarFp.setIntervalsRk(setIntervalsRkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет изменить активность номенклатур в РК.
         * @summary Изменение активности номенклатур РК
         * @param {SetNmActiveRkRequest} [setNmActiveRkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNmActiveRk(setNmActiveRkRequest?: SetNmActiveRkRequest, options?: any): AxiosPromise<void> {
            return localVarFp.setNmActiveRk(setNmActiveRkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * РК в статусе \"11 - на паузе\" - можно снова запустить. Для запуска необходимо, чтобы у РК были активные ставки. GET на `/api/v0/start?id=***` - в ответ `200`, если статус изменен, или `400`, если это сделать не удалось.
         * @summary Запуск РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startRk(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.startRk(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод позволяет завершить РК, находящиеся в статусе 9 или 11.
         * @summary Завершение РК
         * @param {number} id Идентификатор РК
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopRk(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.stopRk(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Метод позволяет получить список ставок по типу размещения РК. С помощью этого метода изменить ставку невозможно.
     * @summary Список ставок по типу размещения РК
     * @param {4 | 5 | 6 | 7} type Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
     * @param {AllCpmByTypeRequest} allCpmByTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public allCpmByType(type: 4 | 5 | 6 | 7, allCpmByTypeRequest: AllCpmByTypeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).allCpmByType(type, allCpmByTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет изменить активность предметной группы для рекламы в поиске. Изменение активности доступно только для РК в статусе 9 или 11.
     * @summary Изменение активности предметной группы для РК в поиске
     * @param {number} id Идентификатор РК
     * @param {number} subjectId Идентификатор предметной группы, для которой меняется активность
     * @param {boolean} status Новое состояние (&#x60;true&#x60; - сделать группу активной или &#x60;false&#x60; - сделать группу неактивной)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changeActiveSubjectIdRk(id: number, subjectId: number, status: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).changeActiveSubjectIdRk(id, subjectId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получение списка ставок для типа размещения. Данные в ответе отсортированы по величине ставки от большей к меньшей.
     * @summary Список ставок
     * @param {4 | 5 | 6 | 7} type Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
     * @param {number} param Параметр запроса, по которому будет получен список ставок активных РК. Должен быть значением &#x60;menuId&#x60;, &#x60;subjectId&#x60; или &#x60;setId&#x60; в зависимости от типа РК.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllCpm(type: 4 | 5 | 6 | 7, param: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllCpm(type, param, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет получить список значений параметра menuId.
     * @summary Словарь значений параметра menuId
     * @param {number} [id] Идентификатор меню, где размещается РК (для РК в каталоге). Принимает значение параметра &#x60;menuId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMenuIdDict(id?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMenuIdDict(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получение информации об одной РК
     * @summary Информация о РК
     * @param {number} id Идентификатор РК
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRk(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRk(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получение количества рекламных кампаний (РК) поставщика
     * @summary Получение РК
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRkCount(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRkCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет получить список РК продавца.
     * @summary Список РК
     * @param {7 | 9 | 11} [status] Статус РК: 7 - РК завершена 9 - идут показы 11 - РК на паузе
     * @param {4 | 5 | 6 | 7} [type] Тип РК: 4 - реклама в каталоге 5 - реклама в карточке товара 6 - реклама в поиске 7 - реклама в рекомендациях на главной странице
     * @param {number} [limit] Количество кампаний в ответе
     * @param {number} [offset] Смещение относительно первой РК
     * @param {'create' | 'change' | 'id'} [order] Порядок: create (по времени создания РК) change (по времени последнего изменения РК) id (по идентификатору РК) Например: **_/api/v0/adverts?type&#x3D;6&amp;limit&#x3D;5&amp;offset&#x3D;10&amp;order&#x3D;change&amp;direction&#x3D;asc**
     * @param {'desc' | 'asc'} [direction] Направление: desc (от большего к меньшему) asc (от меньшего к большему) Например: **_/api/v0/adverts?type&#x3D;6&amp;limit&#x3D;5&amp;offset&#x3D;10&amp;order&#x3D;change&amp;direction&#x3D;asc**
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRks(status?: 7 | 9 | 11, type?: 4 | 5 | 6 | 7, limit?: number, offset?: number, order?: 'create' | 'change' | 'id', direction?: 'desc' | 'asc', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRks(status, type, limit, offset, order, direction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет получить список значений параметра setId.
     * @summary Словарь значений параметра setId
     * @param {number} [id] Идентификатор сочетания предмета и пола (для РК в карточке товара). Принимает значение параметра &#x60;setId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSetIdDict(id?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSetIdDict(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет получить список значений параметра subjectId.
     * @summary Словарь значений параметра subjectId
     * @param {number} [id] Идентификатор предметной группы, для которой создана РК (для РК в поиске и рекомендациях). Принимает значение параметра &#x60;subjectId&#x60; из РК. При пустом параметре вернётся весь список существующих значений.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectIdDict(id?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectIdDict(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * РК в статусе \"9 - идут показы\" - можно запаузить, сделав GET на `/api/v0/pause?id=***`.
     * @summary Пауза РК
     * @param {number} id Идентификатор РК
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pauseRk(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pauseRk(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет переименовать рекламную кампанию.
     * @summary Переименование РК
     * @param {RenameRkRequest} [renameRkRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public renameRk(renameRkRequest?: RenameRkRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).renameRk(renameRkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Изменение ставки у рекламной кампании Доступно для РК в карточке товара, поиске или рекомендациях
     * @summary Изменение ставки у РК
     * @param {SetCpmRequest} setCpmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setCpm(setCpmRequest: SetCpmRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setCpm(setCpmRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет изменить временной интервал показа рекламной кампании.
     * @summary Изменение интервалов показа РК
     * @param {SetIntervalsRkRequest} [setIntervalsRkRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setIntervalsRk(setIntervalsRkRequest?: SetIntervalsRkRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setIntervalsRk(setIntervalsRkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет изменить активность номенклатур в РК.
     * @summary Изменение активности номенклатур РК
     * @param {SetNmActiveRkRequest} [setNmActiveRkRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setNmActiveRk(setNmActiveRkRequest?: SetNmActiveRkRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setNmActiveRk(setNmActiveRkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * РК в статусе \"11 - на паузе\" - можно снова запустить. Для запуска необходимо, чтобы у РК были активные ставки. GET на `/api/v0/start?id=***` - в ответ `200`, если статус изменен, или `400`, если это сделать не удалось.
     * @summary Запуск РК
     * @param {number} id Идентификатор РК
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startRk(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startRk(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод позволяет завершить РК, находящиеся в статусе 9 или 11.
     * @summary Завершение РК
     * @param {number} id Идентификатор РК
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stopRk(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).stopRk(id, options).then((request) => request(this.axios, this.basePath));
    }
}


